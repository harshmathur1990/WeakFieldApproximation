import sys
sys.path.insert(1, '/home/harsh/CourseworkRepo/stic/example')
sys.path.insert(2, '/home/harsh/CourseworkRepo/WFAComparison')
import h5py
import numpy as np
import sunpy.io.fits
from pathlib import Path
from prepare_data import *
from stray_light_approximation import *


base_path = Path(
    '/home/harsh/Spinor Inversions Nagaraju/'
)

falc_file_path = Path(
    '/home/harsh/CourseworkRepo/stic/run/falc_nicole_for_stic.nc'
)

catalog_file = '/home/harsh/CourseworkRepo/WFAComparison/catalog_8542.txt'

index = '[18:18+464][::-1]'

wave_ca = np.array(
    [
        8531.96148, 8531.99521, 8532.02894, 8532.06267, 8532.0964 ,
        8532.13013, 8532.16386, 8532.19759, 8532.23132, 8532.26505,
        8532.29878, 8532.33251, 8532.36624, 8532.39997, 8532.4337 ,
        8532.46743, 8532.50116, 8532.53489, 8532.56862, 8532.60235,
        8532.63608, 8532.66981, 8532.70354, 8532.73727, 8532.771  ,
        8532.80473, 8532.83846, 8532.87219, 8532.90592, 8532.93965,
        8532.97338, 8533.00711, 8533.04084, 8533.07457, 8533.1083 ,
        8533.14203, 8533.17576, 8533.20949, 8533.24322, 8533.27695,
        8533.31068, 8533.34441, 8533.37814, 8533.41187, 8533.4456 ,
        8533.47933, 8533.51306, 8533.54679, 8533.58052, 8533.61425,
        8533.64798, 8533.68171, 8533.71544, 8533.74917, 8533.7829 ,
        8533.81663, 8533.85036, 8533.88409, 8533.91782, 8533.95155,
        8533.98528, 8534.01901, 8534.05274, 8534.08647, 8534.1202 ,
        8534.15393, 8534.18766, 8534.22139, 8534.25512, 8534.28885,
        8534.32258, 8534.35631, 8534.39004, 8534.42377, 8534.4575 ,
        8534.49123, 8534.52496, 8534.55869, 8534.59242, 8534.62615,
        8534.65988, 8534.69361, 8534.72734, 8534.76107, 8534.7948 ,
        8534.82853, 8534.86226, 8534.89599, 8534.92972, 8534.96345,
        8534.99718, 8535.03091, 8535.06464, 8535.09837, 8535.1321 ,
        8535.16583, 8535.19956, 8535.23329, 8535.26702, 8535.30075,
        8535.33448, 8535.36821, 8535.40194, 8535.43567, 8535.4694 ,
        8535.50313, 8535.53686, 8535.57059, 8535.60432, 8535.63805,
        8535.67178, 8535.70551, 8535.73924, 8535.77297, 8535.8067 ,
        8535.84043, 8535.87416, 8535.90789, 8535.94162, 8535.97535,
        8536.00908, 8536.04281, 8536.07654, 8536.11027, 8536.144  ,
        8536.17773, 8536.21146, 8536.24519, 8536.27892, 8536.31265,
        8536.34638, 8536.38011, 8536.41384, 8536.44757, 8536.4813 ,
        8536.51503, 8536.54876, 8536.58249, 8536.61622, 8536.64995,
        8536.68368, 8536.71741, 8536.75114, 8536.78487, 8536.8186 ,
        8536.85233, 8536.88606, 8536.91979, 8536.95352, 8536.98725,
        8537.02098, 8537.05471, 8537.08844, 8537.12217, 8537.1559 ,
        8537.18963, 8537.22336, 8537.25709, 8537.29082, 8537.32455,
        8537.35828, 8537.39201, 8537.42574, 8537.45947, 8537.4932 ,
        8537.52693, 8537.56066, 8537.59439, 8537.62812, 8537.66185,
        8537.69558, 8537.72931, 8537.76304, 8537.79677, 8537.8305 ,
        8537.86423, 8537.89796, 8537.93169, 8537.96542, 8537.99915,
        8538.03288, 8538.06661, 8538.10034, 8538.13407, 8538.1678 ,
        8538.20153, 8538.23526, 8538.26899, 8538.30272, 8538.33645,
        8538.37018, 8538.40391, 8538.43764, 8538.47137, 8538.5051 ,
        8538.53883, 8538.57256, 8538.60629, 8538.64002, 8538.67375,
        8538.70748, 8538.74121, 8538.77494, 8538.80867, 8538.8424 ,
        8538.87613, 8538.90986, 8538.94359, 8538.97732, 8539.01105,
        8539.04478, 8539.07851, 8539.11224, 8539.14597, 8539.1797 ,
        8539.21343, 8539.24716, 8539.28089, 8539.31462, 8539.34835,
        8539.38208, 8539.41581, 8539.44954, 8539.48327, 8539.517  ,
        8539.55073, 8539.58446, 8539.61819, 8539.65192, 8539.68565,
        8539.71938, 8539.75311, 8539.78684, 8539.82057, 8539.8543 ,
        8539.88803, 8539.92176, 8539.95549, 8539.98922, 8540.02295,
        8540.05668, 8540.09041, 8540.12414, 8540.15787, 8540.1916 ,
        8540.22533, 8540.25906, 8540.29279, 8540.32652, 8540.36025,
        8540.39398, 8540.42771, 8540.46144, 8540.49517, 8540.5289 ,
        8540.56263, 8540.59636, 8540.63009, 8540.66382, 8540.69755,
        8540.73128, 8540.76501, 8540.79874, 8540.83247, 8540.8662 ,
        8540.89993, 8540.93366, 8540.96739, 8541.00112, 8541.03485,
        8541.06858, 8541.10231, 8541.13604, 8541.16977, 8541.2035 ,
        8541.23723, 8541.27096, 8541.30469, 8541.33842, 8541.37215,
        8541.40588, 8541.43961, 8541.47334, 8541.50707, 8541.5408 ,
        8541.57453, 8541.60826, 8541.64199, 8541.67572, 8541.70945,
        8541.74318, 8541.77691, 8541.81064, 8541.84437, 8541.8781 ,
        8541.91183, 8541.94556, 8541.97929, 8542.01302, 8542.04675,
        8542.08048, 8542.11421, 8542.14794, 8542.18167, 8542.2154 ,
        8542.24913, 8542.28286, 8542.31659, 8542.35032, 8542.38405,
        8542.41778, 8542.45151, 8542.48524, 8542.51897, 8542.5527 ,
        8542.58643, 8542.62016, 8542.65389, 8542.68762, 8542.72135,
        8542.75508, 8542.78881, 8542.82254, 8542.85627, 8542.89   ,
        8542.92373, 8542.95746, 8542.99119, 8543.02492, 8543.05865,
        8543.09238, 8543.12611, 8543.15984, 8543.19357, 8543.2273 ,
        8543.26103, 8543.29476, 8543.32849, 8543.36222, 8543.39595,
        8543.42968, 8543.46341, 8543.49714, 8543.53087, 8543.5646 ,
        8543.59833, 8543.63206, 8543.66579, 8543.69952, 8543.73325,
        8543.76698, 8543.80071, 8543.83444, 8543.86817, 8543.9019 ,
        8543.93563, 8543.96936, 8544.00309, 8544.03682, 8544.07055,
        8544.10428, 8544.13801, 8544.17174, 8544.20547, 8544.2392 ,
        8544.27293, 8544.30666, 8544.34039, 8544.37412, 8544.40785,
        8544.44158, 8544.47531, 8544.50904, 8544.54277, 8544.5765 ,
        8544.61023, 8544.64396, 8544.67769, 8544.71142, 8544.74515,
        8544.77888, 8544.81261, 8544.84634, 8544.88007, 8544.9138 ,
        8544.94753, 8544.98126, 8545.01499, 8545.04872, 8545.08245,
        8545.11618, 8545.14991, 8545.18364, 8545.21737, 8545.2511 ,
        8545.28483, 8545.31856, 8545.35229, 8545.38602, 8545.41975,
        8545.45348, 8545.48721, 8545.52094, 8545.55467, 8545.5884 ,
        8545.62213, 8545.65586, 8545.68959, 8545.72332, 8545.75705,
        8545.79078, 8545.82451, 8545.85824, 8545.89197, 8545.9257 ,
        8545.95943, 8545.99316, 8546.02689, 8546.06062, 8546.09435,
        8546.12808, 8546.16181, 8546.19554, 8546.22927, 8546.263  ,
        8546.29673, 8546.33046, 8546.36419, 8546.39792, 8546.43165,
        8546.46538, 8546.49911, 8546.53284, 8546.56657, 8546.6003 ,
        8546.63403, 8546.66776, 8546.70149, 8546.73522, 8546.76895,
        8546.80268, 8546.83641, 8546.87014, 8546.90387, 8546.9376 ,
        8546.97133, 8547.00506, 8547.03879, 8547.07252, 8547.10625,
        8547.13998, 8547.17371, 8547.20744, 8547.24117, 8547.2749 ,
        8547.30863, 8547.34236, 8547.37609, 8547.40982, 8547.44355,
        8547.47728, 8547.51101, 8547.54474, 8547.57847
    ]
)

correction_factor = np.array(
    [
        1.        , 0.99986251, 0.99972503, 0.99958754, 0.99945006,
        0.99931257, 0.99917509, 0.9990376 , 0.99890012, 0.99876263,
        0.99862515, 0.99848766, 0.99835018, 0.99821269, 0.99807521,
        0.99793772, 0.99780024, 0.99766275, 0.99752527, 0.99738778,
        0.9972503 , 0.99711281, 0.99697533, 0.99683784, 0.99670036,
        0.99656287, 0.99642539, 0.9962879 , 0.99615042, 0.99601293,
        0.99587545, 0.99573796, 0.99560048, 0.99546299, 0.99532551,
        0.99518802, 0.99505054, 0.99491305, 0.99477557, 0.99463808,
        0.9945006 , 0.99436311, 0.99422563, 0.99408814, 0.99395066,
        0.99381317, 0.99367569, 0.9935382 , 0.99340072, 0.99326323,
        0.99312575, 0.99298826, 0.99285078, 0.99271329, 0.99257581,
        0.99243832, 0.99230084, 0.99216335, 0.99202587, 0.99188838,
        0.9917509 , 0.99161341, 0.99147593, 0.99133844, 0.99120096,
        0.99106347, 0.99092599, 0.9907885 , 0.99065102, 0.99051353,
        0.99037605, 0.99023856, 0.99010108, 0.98996359, 0.98982611,
        0.98968862, 0.98955114, 0.98941365, 0.98927617, 0.98913868,
        0.9890012 , 0.98886371, 0.98872623, 0.98858874, 0.98845126,
        0.98831377, 0.98817629, 0.9880388 , 0.98790132, 0.98776383,
        0.98762635, 0.98748886, 0.98735138, 0.98721389, 0.98707641,
        0.98693892, 0.98680144, 0.98666395, 0.98652647, 0.98638898,
        0.9862515 , 0.98611401, 0.98597653, 0.98583904, 0.98570156,
        0.98556407, 0.98542659, 0.9852891 , 0.98515162, 0.98501413,
        0.98487665, 0.98473916, 0.98460168, 0.98446419, 0.98432671,
        0.98418922, 0.98405174, 0.98391425, 0.98377677, 0.98363928,
        0.9835018 , 0.98336431, 0.98322683, 0.98308934, 0.98295186,
        0.98281437, 0.98267689, 0.9825394 , 0.98240192, 0.98226443,
        0.98212695, 0.98198946, 0.98185198, 0.98171449, 0.98157701,
        0.98143952, 0.98130204, 0.98116455, 0.98102707, 0.98088958,
        0.9807521 , 0.98061461, 0.98047713, 0.98033964, 0.98020216,
        0.98006467, 0.97992719, 0.9797897 , 0.97965222, 0.97951473,
        0.97937725, 0.97923976, 0.97910228, 0.97896479, 0.97882731,
        0.97868982, 0.97855234, 0.97841485, 0.97827737, 0.97813988,
        0.9780024 , 0.97786491, 0.97772743, 0.97758994, 0.97745246,
        0.97731497, 0.97717749, 0.97704   , 0.97690252, 0.97676503,
        0.97662755, 0.97649006, 0.97635258, 0.97621509, 0.97607761,
        0.97594012, 0.97580264, 0.97566515, 0.97552767, 0.97539018,
        0.9752527 , 0.97511521, 0.97497773, 0.97484024, 0.97470276,
        0.97456527, 0.97442779, 0.9742903 , 0.97415282, 0.97401533,
        0.97387785, 0.97374036, 0.97360288, 0.97346539, 0.97332791,
        0.97319042, 0.97305294, 0.97291545, 0.97277797, 0.97264048,
        0.972503  , 0.97236551, 0.97222803, 0.97209054, 0.97195306,
        0.97181557, 0.97167809, 0.9715406 , 0.97140312, 0.97126563,
        0.97112815, 0.97099066, 0.97085318, 0.97071569, 0.97057821,
        0.97044072, 0.97030324, 0.97016575, 0.97002826, 0.96989078,
        0.96975329, 0.96961581, 0.96947832, 0.96934084, 0.96920335,
        0.96906587, 0.96892838, 0.9687909 , 0.96865341, 0.96851593,
        0.96837844, 0.96824096, 0.96810347, 0.96796599, 0.9678285 ,
        0.96769102, 0.96755353, 0.96741605, 0.96727856, 0.96714108,
        0.96700359, 0.96686611, 0.96672862, 0.96659114, 0.96645365,
        0.96631617, 0.96617868, 0.9660412 , 0.96590371, 0.96576623,
        0.96562874, 0.96549126, 0.96535377, 0.96521629, 0.9650788 ,
        0.96494132, 0.96480383, 0.96466635, 0.96452886, 0.96439138,
        0.96425389, 0.96411641, 0.96397892, 0.96384144, 0.96370395,
        0.96356647, 0.96342898, 0.9632915 , 0.96315401, 0.96301653,
        0.96287904, 0.96274156, 0.96260407, 0.96246659, 0.9623291 ,
        0.96219162, 0.96205413, 0.96191665, 0.96177916, 0.96164168,
        0.96150419, 0.96136671, 0.96122922, 0.96109174, 0.96095425,
        0.96081677, 0.96067928, 0.9605418 , 0.96040431, 0.96026683,
        0.96012934, 0.95999186, 0.95985437, 0.95971689, 0.9595794 ,
        0.95944192, 0.95930443, 0.95916695, 0.95902946, 0.95889198,
        0.95875449, 0.95861701, 0.95847952, 0.95834204, 0.95820455,
        0.95806707, 0.95792958, 0.9577921 , 0.95765461, 0.95751713,
        0.95737964, 0.95724216, 0.95710467, 0.95696719, 0.9568297 ,
        0.95669222, 0.95655473, 0.95641725, 0.95627976, 0.95614228,
        0.95600479, 0.95586731, 0.95572982, 0.95559234, 0.95545485,
        0.95531737, 0.95517988, 0.9550424 , 0.95490491, 0.95476743,
        0.95462994, 0.95449246, 0.95435497, 0.95421749, 0.95408   ,
        0.95394252, 0.95380503, 0.95366755, 0.95353006, 0.95339258,
        0.95325509, 0.95311761, 0.95298012, 0.95284264, 0.95270515,
        0.95256767, 0.95243018, 0.9522927 , 0.95215521, 0.95201773,
        0.95188024, 0.95174276, 0.95160527, 0.95146779, 0.9513303 ,
        0.95119282, 0.95105533, 0.95091785, 0.95078036, 0.95064288,
        0.95050539, 0.95036791, 0.95023042, 0.95009294, 0.94995545,
        0.94981797, 0.94968048, 0.949543  , 0.94940551, 0.94926803,
        0.94913054, 0.94899306, 0.94885557, 0.94871809, 0.9485806 ,
        0.94844312, 0.94830563, 0.94816815, 0.94803066, 0.94789318,
        0.94775569, 0.94761821, 0.94748072, 0.94734324, 0.94720575,
        0.94706827, 0.94693078, 0.9467933 , 0.94665581, 0.94651833,
        0.94638084, 0.94624336, 0.94610587, 0.94596839, 0.9458309 ,
        0.94569342, 0.94555593, 0.94541845, 0.94528096, 0.94514348,
        0.94500599, 0.94486851, 0.94473102, 0.94459354, 0.94445605,
        0.94431857, 0.94418108, 0.9440436 , 0.94390611, 0.94376863,
        0.94363114, 0.94349366, 0.94335617, 0.94321869, 0.9430812 ,
        0.94294372, 0.94280623, 0.94266875, 0.94253126, 0.94239378,
        0.94225629, 0.94211881, 0.94198132, 0.94184384, 0.94170635,
        0.94156887, 0.94143138, 0.9412939 , 0.94115641, 0.94101893,
        0.94088144, 0.94074396, 0.94060647, 0.94046899, 0.9403315 ,
        0.94019402, 0.94005653, 0.93991904, 0.93978156, 0.93964407,
        0.93950659, 0.9393691 , 0.93923162, 0.93909413, 0.93895665,
        0.93881916, 0.93868168, 0.93854419, 0.93840671, 0.93826922,
        0.93813174, 0.93799425, 0.93785677, 0.93771928, 0.9375818 ,
        0.93744431, 0.93730683, 0.93716934, 0.93703186, 0.93689437,
        0.93675689, 0.9366194 , 0.93648192, 0.93634443
    ]
)


weights_file = '/home/harsh/CourseworkRepo/2008 Sp Data/final_data/weights.txt'

interesting_fov= '[0:19, :, 230:290]'

k = 0.23

stic_cgs_calib_factor = 287031.718

cw = np.asarray([8542.])
cont = []
for ii in cw:
    cont.append(getCont(ii))


def get_raw_data(filename):

    raw_data = np.zeros((20, 4, 512, 512), dtype=np.float64)

    for i in range(20):
        data, header = sunpy.io.fits.read(base_path / filename)[i + 1]
        raw_data[i] = data

    return raw_data[:, :, :, 18:18 + 464][:, :, :, ::-1]


def correct_for_straylight(data):

    fov_data = data[0:19, :, 230:290, :]

    fov_data[:, 0] *= correction_factor

    fov_data[:, 0] = (
        fov_data[:, 0] - k * fov_data[:, 0, :, 0][:, :, np.newaxis]
    ) / (1-k)

    median_profile = np.median(fov_data[:, 0, 0:25], (0, 1))

    catalog = np.loadtxt(catalog_file)

    norm_line, norm_atlas, atlas_wave = normalise_profiles(
        median_profile,
        wave_ca,
        catalog[:, 1],
        catalog[:, 0],
        cont_wave=wave_ca[0]
    )

    plt.plot(wave_ca, norm_line, label='median')
    plt.plot(atlas_wave, norm_atlas, label='BASS 2000')
    plt.legend()
    plt.show()

    return fov_data


def generate_stic_input_files(filename):

    fov_data = get_raw_data(filename)

    fov_data = correct_for_straylight(fov_data)

    wc8, ic8 = findgrid(wave, (wave[10] - wave[9])*0.25, extra=8)

    ca_8 = sp.profile(nx=50, ny=19, ns=4, nw=wc8.size)

    ca_8.wav[:] = wc8[:]

    ca_8.dat[0,:,:,ic8,:] = np.transpose(
        fov_data,
        axes=(0, 2, 3, 1)
    ) / stic_cgs_calib_factor

    ca_8.weights[:,:] = np.loadtxt(weights_file)

    ca_8.write(
        '{}_stic_profiles.nc'.format(
            filename
        )
    )

    lab = "region = {0:10.5f}, {1:8.5f}, {2:3d}, {3:e}, {4}"
    print(" ")
    print("Regions information for the input file:" )
    print(lab.format(ca_8.wav[0], ca_8.wav[1]-ca_8.wav[0], ca_8.wav.size, cont[2],  'none, none'))
    print("(w0, dw, nw, normalization, degradation_type, instrumental_profile file)")
    print(" ")


def generate_input_atmos_file():

    f = h5py.File(falc_file_path, 'r')

    m = sp.model(nx=50, ny=19, nt=1, ndep=150)

    m.ltau[:, :, :] = f['ltau500'][0, 0, 0]

    m.pgas[:, :, :] = 5

    m.temp[:, :, :] = f['temp'][0, 0, 0]

    m.vlos[:, :, :] = f['vlos'][0, 0, 0]

    m.vturb[:, :, :] = f['vturb'][0, 0, 0]

    m.write('falc_50_19.nc')
